{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-content-posts-g-rpc-index-md-91f90a7d428079e6f877.js","mappings":"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","sources":["webpack://gatsby-blog/./content/posts/gRPC/index.md","webpack://gatsby-blog/./src/templates/blog-post.tsx","webpack://gatsby-blog/./src/components/mdx.tsx","webpack://gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"說明\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"RPC (Remote Procedure Call) 是一種通信協議，允許一個應用程式在不同的電腦上執行程式並獲取結果，有點像是調用函式的感覺。 通常用於分散式系統中。\"), \"\\n\", React.createElement(_components.li, null, \"gRPC 是一個跨平台的開源遠程調用框架，是由 Google 開發，奠基在 HTTP/2 上提供低延遲 (low latency)，支援串流，更容易做到權限驗證 (authentication)。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"實作\"), \"\\n\", React.createElement(_components.h3, null, \"定義 protobuf\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-protobuf\"\n  }, \"// protocal.proto\\nsyntax = \\\"proto3\\\"; // 語法版本\\n\\n// 定義服務\\nservice greet{\\n    rpc hello (req) returns (res) {} // 定義函式\\n    rpc echo  (req) returns (res) {} // 定義函式\\n}\\n\\n// 定義引數格式\\nmessage req {\\n    string data = 1;\\n}\\n\\n// 定義引數格式\\nmessage res {\\n    string data = 1;\\n}\\n\")), \"\\n\", React.createElement(_components.h3, null, \"實作 python\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"安裝需要的套件\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"pip install grpcio grpcio-tools\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"轉換 proto ，此範例轉換完後會得到\", React.createElement(_components.code, null, \"protocal_pb2_grpc.py\"), \" 和 \", React.createElement(_components.code, null, \"protocal_pb2.py\"), \"兩個檔案。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"python -m grpc_tools.protoc -I=./ --python_out=./ --grpc_python_out=./ ./<protocal_filename>.proto\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"實作Sever端\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"# server.py\\nimport grpc\\nimport protocal_pb2\\nimport protocal_pb2_grpc\\nfrom concurrent import futures\\n\\nclass TestService(protocal_pb2_grpc.greetServicer):\\n    def hello(self, request, context):\\n        return protocal_pb2.res(data=\\\"hellow\\\")\\n\\n    def echo(self, request, context):\\n        return protocal_pb2.res(data=request.data)\\n\\nif __name__ == '__main__':\\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\\n    protocal_pb2_grpc.add_greetServicer_to_server(\\n        TestService(), server)\\n    server.add_insecure_port('[::]:50051')\\n    server.start()\\n    server.wait_for_termination()\\n    print(\\\"Listen to\\\", \\\"[::]:50051\\\")\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"實作Client端\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"# client.py\\nimport grpc\\nimport protocal_pb2\\nimport protocal_pb2_grpc\\n\\nif __name__ == \\\"__main__\\\":\\n    with grpc.insecure_channel(\\\"localhost:50051\\\") as channel:\\n        stub = protocal_pb2_grpc.greetStub(channel)\\n        req = protocal_pb2.req(data=\\\"value\\\")\\n        print(stub.hello(req).data)\\n        print(stub.echo(req).data)\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"啟動服務\", React.createElement(_components.code, null, \"server.py\"), \"，執行\", React.createElement(_components.code, null, \"client.py\"), \"程式。回傳hellow以及value。\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/wei-chieh/Desktop/gatsby-blog/content/posts/gRPC/index.md\";\nimport * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport {Card, CardContent, CardDescription, CardHeader, CardTitle} from \"@/components/ui/card\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {components} from \"@/components/mdx\";\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  const {title, date} = data.allMdx.nodes[0].frontmatter;\n  return React.createElement(Layout, {\n    pageTitle: title\n  }, React.createElement(Card, null, React.createElement(CardHeader, null, React.createElement(CardTitle, {\n    className: \"text-2xl text-center\"\n  }, title), React.createElement(CardDescription, null, date)), React.createElement(CardContent, null, React.createElement(MDXProvider, {\n    components: components\n  }, children))));\n};\nconst pageQuery = \"29865885\";\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from \"react\"\n\n// custom components for markdown content\nexport const components = {\n  h1: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h1 className=\"text-4xl font-semibold mt-8 mb-4 pb-2 border-gray-200 dark:border-gray-700\" {...props} />\n  ),\n  h2: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h2 className=\"text-3xl font-semibold mt-8 mb-4 pb-2 border-gray-200 dark:border-gray-700\" {...props} />\n  ),\n  h3: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h3 className=\"text-2xl font-semibold mt-6 mb-3\" {...props} />\n  ),\n  h4: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h4 className=\"text-xl font-semibold mt-5 mb-2\" {...props} />\n  ),\n  h5: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h5 className=\"text-lg font-semibold mt-4 mb-2\" {...props} />\n  ),\n  h6: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h6 className=\"text-base font-semibold mt-4 mb-2\" {...props} />\n  ),\n  p: (props: React.HTMLAttributes<HTMLParagraphElement>) => (\n    <p className=\"my-4 text-base leading-6 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  ul: (props: React.HTMLAttributes<HTMLUListElement>) => (\n    <ul className=\"list-disc pl-8 my-4 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  ol: (props: React.HTMLAttributes<HTMLOListElement>) => (\n    <ol className=\"list-decimal pl-8 my-4 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  li: (props: React.HTMLAttributes<HTMLLIElement>) => (\n    <li className=\"my-1\" {...props} />\n  ),\n  a: (props: React.HTMLAttributes<HTMLAnchorElement>) => (\n    <a className=\"text-blue-600 hover:underline dark:text-blue-400\" {...props} />\n  ),\n  blockquote: (props: React.HTMLAttributes<HTMLQuoteElement>) => (\n    <blockquote className=\"border-l-4 border-gray-300 dark:border-gray-600 pl-4 text-gray-600 dark:text-gray-400 my-4\" {...props} />\n  ),\n  code: (props: React.HTMLAttributes<HTMLElement>) => (\n    <code className=\"bg-gray-100 dark:bg-gray-800 rounded px-1 py-0.5 font-mono text-sm text-gray-800 dark:text-gray-200\" {...props} />\n  ),\n  pre: (props: React.HTMLAttributes<HTMLPreElement>) => (\n    <pre style={{ overflowX: \"auto\"}} className=\"bg-gray-100 dark:bg-gray-800 rounded-md p-4 my-4 overflow-x-auto text-sm font-mono text-gray-800 dark:text-gray-200\" {...props} />\n  ),\n  table: (props: React.TableHTMLAttributes<HTMLTableElement>) => (\n    <div className=\"overflow-x-auto my-4\">\n      <table className=\"min-w-full border-collapse border border-gray-300 dark:border-gray-700\" {...props} />\n    </div>\n  ),\n  th: (props: React.ThHTMLAttributes<HTMLTableHeaderCellElement>) => (\n    <th className=\"border border-gray-300 dark:border-gray-700 px-4 py-2 bg-gray-100 dark:bg-gray-800 font-semibold text-left\" {...props} />\n  ),\n  td: (props: React.TdHTMLAttributes<HTMLTableDataCellElement>) => (\n    <td className=\"border border-gray-300 dark:border-gray-700 px-4 py-2\" {...props} />\n  ),\n  hr: (props: React.HTMLAttributes<HTMLHRElement>) => (\n    <hr className=\"my-8 border-t border-gray-300 dark:border-gray-700\" {...props} />\n  ),\n  img: (props: React.ImgHTMLAttributes<HTMLImageElement>) => (\n    <img className=\"max-w-full h-auto rounded-md my-4\" {...props} alt={props.alt || ''} />\n  ),\n}","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","ul","li","h3","pre","code","ol","p","_provideComponents","components","React","className","wrapper","MDXLayout","BlogPost","_ref","data","children","title","date","allMdx","nodes","frontmatter","Layout","pageTitle","Card","CardHeader","CardTitle","CardDescription","CardContent","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","h1","h4","h5","h6","a","blockquote","style","overflowX","table","th","td","hr","img","alt","emptyComponents","MDXContext","useMDXComponents","contextComponents","properties","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}