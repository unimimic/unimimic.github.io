{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-content-posts-docker-gpu-index-md-ea1e5cf7b7fc1ee657d7.js","mappings":"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","sources":["webpack://gatsby-blog/./content/posts/Docker-GPU/index.md","webpack://gatsby-blog/./src/templates/blog-post.tsx","webpack://gatsby-blog/./src/components/mdx.tsx","webpack://gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    ol: \"ol\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"在 ubuntu 環境進行測試\"), \"\\n\", React.createElement(_components.li, null, \"以下主要有三大部分，有安裝Docker、安裝Nvidia Driver、安裝NVIDIA Container Toolkit。其中NVIDIA Container Toolkit 有兩種方法，挑其中一種進行安裝即可。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"安裝Docker\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"如有需要更詳細的安裝，可\", React.createElement(_components.a, {\n    href: \"https://docs.docker.com/engine/install/ubuntu/\"\n  }, \"參考官方教學\"), \"。\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"移除舊版Docker (可選)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo apt-get remove docker docker-engine docker.io containerd runc\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"更新apt安裝包以及所需的相關套件\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo apt-get update\\n\\nsudo apt-get install \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    gnupg \\\\\\n    lsb-release\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"加入docker的官方GPG Key\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo mkdir -m 0755 -p /etc/apt/keyrings\\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"設置repository\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"echo \\\\\\n  \\\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\\\\n  $(lsb_release -cs) stable\\\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"更新apt安裝包\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo apt-get update\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"安裝docker\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"確認是否安裝成功\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo docker run hello-world\\n\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"安裝Nvidia Driver\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"移除舊的Nvidia Driver\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo apt-get purge nvidia*\\nsudo apt-get autoremove\\nsudo apt-get autoclean\\nsudo rm -rf /usr/local/cuda*\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"查詢安裝版本，\", React.createElement(_components.a, {\n    href: \"https://www.nvidia.com.tw/Download/index.aspx?lang=tw\"\n  }, \"點此連結到官網查詢\"), \"。\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"安裝Nvidia Driver\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo apt update\\nsudo apt install nvidia-utils-<版號前三碼>\\nsudo apt install nvidia-driver-<版號前三碼>\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"重啟電腦\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo reboot\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"確認安裝成功\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"nvidia-smi\\n\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"安裝NVIDIA Container Toolkit\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"如有需要更詳細的安裝，可\", React.createElement(_components.a, {\n    href: \"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html\"\n  }, \"參考官方教學\"), \"。\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"設定repo以及GPG key\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \\\\\\n      && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\\\\n      && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \\\\\\n            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \\\\\\n            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"安裝 nvidia-container-toolkit\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo apt-get update\\nsudo apt-get install -y nvidia-container-toolkit\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"配置 Docker daemon\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo nvidia-ctk runtime configure --runtime=docker\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"重啟 Docker\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo systemctl restart docker\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"測試是否安裝成功\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo docker run --rm --runtime=nvidia --gpus all nvidia/cuda:11.6.2-base-ubuntu20.04 nvidia-smi\\n\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"安裝NVIDIA Container Toolkit (nvidia-docker2)\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"設定repo以及GPG key\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \\\\\\n   && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \\\\\\n   && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"安裝 nvidia-docker2\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo apt-get update\\nsudo apt-get install -y nvidia-docker2\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"重啟 Docker\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo systemctl restart docker\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"測試是否安裝成功\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"sudo docker run --rm --gpus all nvidia/cuda:11.6.2-base-ubuntu20.04 nvidia-smi\\n\")), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/wei-chieh/Desktop/gatsby-blog/content/posts/Docker-GPU/index.md\";\nimport * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport {Card, CardContent, CardDescription, CardHeader, CardTitle} from \"@/components/ui/card\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {components} from \"@/components/mdx\";\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  const {title, date} = data.allMdx.nodes[0].frontmatter;\n  return React.createElement(Layout, {\n    pageTitle: title\n  }, React.createElement(Card, null, React.createElement(CardHeader, null, React.createElement(CardTitle, {\n    className: \"text-2xl text-center\"\n  }, title), React.createElement(CardDescription, null, date)), React.createElement(CardContent, null, React.createElement(MDXProvider, {\n    components: components\n  }, children))));\n};\nconst pageQuery = \"29865885\";\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from \"react\"\n\n// custom components for markdown content\nexport const components = {\n  h1: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h1 className=\"text-4xl font-semibold mt-8 mb-4 pb-2 border-gray-200 dark:border-gray-700\" {...props} />\n  ),\n  h2: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h2 className=\"text-3xl font-semibold mt-8 mb-4 pb-2 border-gray-200 dark:border-gray-700\" {...props} />\n  ),\n  h3: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h3 className=\"text-2xl font-semibold mt-6 mb-3\" {...props} />\n  ),\n  h4: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h4 className=\"text-xl font-semibold mt-5 mb-2\" {...props} />\n  ),\n  h5: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h5 className=\"text-lg font-semibold mt-4 mb-2\" {...props} />\n  ),\n  h6: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h6 className=\"text-base font-semibold mt-4 mb-2\" {...props} />\n  ),\n  p: (props: React.HTMLAttributes<HTMLParagraphElement>) => (\n    <p className=\"my-4 text-base leading-6 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  ul: (props: React.HTMLAttributes<HTMLUListElement>) => (\n    <ul className=\"list-disc pl-8 my-4 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  ol: (props: React.HTMLAttributes<HTMLOListElement>) => (\n    <ol className=\"list-decimal pl-8 my-4 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  li: (props: React.HTMLAttributes<HTMLLIElement>) => (\n    <li className=\"my-1\" {...props} />\n  ),\n  a: (props: React.HTMLAttributes<HTMLAnchorElement>) => (\n    <a className=\"text-blue-600 hover:underline dark:text-blue-400\" {...props} />\n  ),\n  blockquote: (props: React.HTMLAttributes<HTMLQuoteElement>) => (\n    <blockquote className=\"border-l-4 border-gray-300 dark:border-gray-600 pl-4 text-gray-600 dark:text-gray-400 my-4\" {...props} />\n  ),\n  code: (props: React.HTMLAttributes<HTMLElement>) => (\n    <code className=\"bg-gray-100 dark:bg-gray-800 rounded px-1 py-0.5 font-mono text-sm text-gray-800 dark:text-gray-200\" {...props} />\n  ),\n  pre: (props: React.HTMLAttributes<HTMLPreElement>) => (\n    <pre style={{ overflowX: \"auto\"}} className=\"bg-gray-100 dark:bg-gray-800 rounded-md p-4 my-4 overflow-x-auto text-sm font-mono text-gray-800 dark:text-gray-200\" {...props} />\n  ),\n  table: (props: React.TableHTMLAttributes<HTMLTableElement>) => (\n    <div className=\"overflow-x-auto my-4\">\n      <table className=\"min-w-full border-collapse border border-gray-300 dark:border-gray-700\" {...props} />\n    </div>\n  ),\n  th: (props: React.ThHTMLAttributes<HTMLTableHeaderCellElement>) => (\n    <th className=\"border border-gray-300 dark:border-gray-700 px-4 py-2 bg-gray-100 dark:bg-gray-800 font-semibold text-left\" {...props} />\n  ),\n  td: (props: React.TdHTMLAttributes<HTMLTableDataCellElement>) => (\n    <td className=\"border border-gray-300 dark:border-gray-700 px-4 py-2\" {...props} />\n  ),\n  hr: (props: React.HTMLAttributes<HTMLHRElement>) => (\n    <hr className=\"my-8 border-t border-gray-300 dark:border-gray-700\" {...props} />\n  ),\n  img: (props: React.ImgHTMLAttributes<HTMLImageElement>) => (\n    <img className=\"max-w-full h-auto rounded-md my-4\" {...props} alt={props.alt || ''} />\n  ),\n}","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","ul","li","h2","blockquote","p","a","ol","pre","code","_provideComponents","components","React","href","className","wrapper","MDXLayout","BlogPost","_ref","data","children","title","date","allMdx","nodes","frontmatter","Layout","pageTitle","Card","CardHeader","CardTitle","CardDescription","CardContent","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","h1","h3","h4","h5","h6","style","overflowX","table","th","td","hr","img","alt","emptyComponents","MDXContext","useMDXComponents","contextComponents","properties","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}