{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-content-posts-line-notify-index-md-97c3f536e937f324c4c5.js","mappings":"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","sources":["webpack://gatsby-blog/./content/posts/line-notify/index.md","webpack://gatsby-blog/./src/templates/blog-post.tsx","webpack://gatsby-blog/./src/components/mdx.tsx","webpack://gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"註冊服務\"), \"\\n\", React.createElement(_components.p, null, \"步驟：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"到LINE Notify的官方服務網站(\", React.createElement(_components.a, {\n    href: \"https://notify-bot.line.me/zh_TW/\"\n  }, \"https://notify-bot.line.me/zh_TW/\"), \")。點選右上角的登入>點擊帳號旁下拉選單>管理登錄服務>登錄服務>填寫LINE Notify服務的各項資料>同意並前往下一步>登錄>點擊信箱連結啟用。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"備註：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"僅「服務網址」及「Callback URL」兩項需填上http://127.0.0.1，這是因為等等我們的Python會在本機上執行，資料填完再點擊「同意並前往下一步」。\"), \"\\n\", React.createElement(_components.li, null, \"Email要填寫能夠正常收信的，沒收到認證信不能啟用服務。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"發行權杖\"), \"\\n\", React.createElement(_components.p, null, \"步驟：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"個人頁面>發行權杖>填寫權杖名稱>選擇要接收通知的聊天室>發行。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"備註：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"按下發行時會跳出Token，把這一整串Token保存起來。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Python程式實作\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import requests\\n\\ndef LineNotify(token, msg, sticker=None, image=None):\\n    data = {\\n        \\\"url\\\":\\\"https://notify-api.line.me/api/notify\\\",\\n        \\\"headers\\\": {\\\"Authorization\\\": \\\"Bearer \\\" + token}\\n    }\\n    # msg\\n    data.update({\\n        \\\"data\\\": {\\n            \\\"message\\\": msg\\n        }\\n    })\\n    # sticker\\n    if sticker is not None:\\n        data.update({\\n            \\\"params\\\":{\\n                \\\"stickerPackageId\\\": sticker[0],\\n                \\\"stickerId\\\": sticker[1],\\n            }\\n        })\\n    # image\\n    if image is not None:\\n        data.update({\\n            \\\"files\\\":{\\n                \\\"imageFile\\\": image\\n            }\\n        })\\n    # post\\n    r = requests.post(**data)\\n    print(r)\\n    if r.status_code==requests.codes.ok:\\n        print('成功')\\n    else:\\n\\t    print(f'失敗: {r.status_code}')\\n\\nif __name__ == \\\"__main__\\\":\\n    token = \\\"\\\" # 填入token\\n    msg = \\\"test\\\"\\n    LineNotify(token, msg='rser', sticker=(1,4),image=None)\\n    # with open(\\\"test.jpg\\\",\\\"rb\\\") as img:\\n    #     LineNotify(token, msg='rser', sticker=(1,4),image=img)\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/wei-chieh/Desktop/gatsby-blog/content/posts/line-notify/index.md\";\nimport * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport {Card, CardContent, CardDescription, CardHeader, CardTitle} from \"@/components/ui/card\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {components} from \"@/components/mdx\";\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  const {title, date} = data.allMdx.nodes[0].frontmatter;\n  return React.createElement(Layout, {\n    pageTitle: title\n  }, React.createElement(Card, null, React.createElement(CardHeader, null, React.createElement(CardTitle, {\n    className: \"text-2xl text-center\"\n  }, title), React.createElement(CardDescription, null, date)), React.createElement(CardContent, null, React.createElement(MDXProvider, {\n    components: components\n  }, children))));\n};\nconst pageQuery = \"29865885\";\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from \"react\"\n\n// custom components for markdown content\nexport const components = {\n  h1: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h1 className=\"text-4xl font-semibold mt-8 mb-4 pb-2 border-gray-200 dark:border-gray-700\" {...props} />\n  ),\n  h2: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h2 className=\"text-3xl font-semibold mt-8 mb-4 pb-2 border-gray-200 dark:border-gray-700\" {...props} />\n  ),\n  h3: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h3 className=\"text-2xl font-semibold mt-6 mb-3\" {...props} />\n  ),\n  h4: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h4 className=\"text-xl font-semibold mt-5 mb-2\" {...props} />\n  ),\n  h5: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h5 className=\"text-lg font-semibold mt-4 mb-2\" {...props} />\n  ),\n  h6: (props: React.HTMLAttributes<HTMLHeadingElement>) => (\n    <h6 className=\"text-base font-semibold mt-4 mb-2\" {...props} />\n  ),\n  p: (props: React.HTMLAttributes<HTMLParagraphElement>) => (\n    <p className=\"my-4 text-base leading-6 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  ul: (props: React.HTMLAttributes<HTMLUListElement>) => (\n    <ul className=\"list-disc pl-8 my-4 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  ol: (props: React.HTMLAttributes<HTMLOListElement>) => (\n    <ol className=\"list-decimal pl-8 my-4 text-gray-800 dark:text-gray-300\" {...props} />\n  ),\n  li: (props: React.HTMLAttributes<HTMLLIElement>) => (\n    <li className=\"my-1\" {...props} />\n  ),\n  a: (props: React.HTMLAttributes<HTMLAnchorElement>) => (\n    <a className=\"text-blue-600 hover:underline dark:text-blue-400\" {...props} />\n  ),\n  blockquote: (props: React.HTMLAttributes<HTMLQuoteElement>) => (\n    <blockquote className=\"border-l-4 border-gray-300 dark:border-gray-600 pl-4 text-gray-600 dark:text-gray-400 my-4\" {...props} />\n  ),\n  code: (props: React.HTMLAttributes<HTMLElement>) => (\n    <code className=\"bg-gray-100 dark:bg-gray-800 rounded px-1 py-0.5 font-mono text-sm text-gray-800 dark:text-gray-200\" {...props} />\n  ),\n  pre: (props: React.HTMLAttributes<HTMLPreElement>) => (\n    <pre style={{ overflowX: \"auto\"}} className=\"bg-gray-100 dark:bg-gray-800 rounded-md p-4 my-4 overflow-x-auto text-sm font-mono text-gray-800 dark:text-gray-200\" {...props} />\n  ),\n  table: (props: React.TableHTMLAttributes<HTMLTableElement>) => (\n    <div className=\"overflow-x-auto my-4\">\n      <table className=\"min-w-full border-collapse border border-gray-300 dark:border-gray-700\" {...props} />\n    </div>\n  ),\n  th: (props: React.ThHTMLAttributes<HTMLTableHeaderCellElement>) => (\n    <th className=\"border border-gray-300 dark:border-gray-700 px-4 py-2 bg-gray-100 dark:bg-gray-800 font-semibold text-left\" {...props} />\n  ),\n  td: (props: React.TdHTMLAttributes<HTMLTableDataCellElement>) => (\n    <td className=\"border border-gray-300 dark:border-gray-700 px-4 py-2\" {...props} />\n  ),\n  hr: (props: React.HTMLAttributes<HTMLHRElement>) => (\n    <hr className=\"my-8 border-t border-gray-300 dark:border-gray-700\" {...props} />\n  ),\n  img: (props: React.ImgHTMLAttributes<HTMLImageElement>) => (\n    <img className=\"max-w-full h-auto rounded-md my-4\" {...props} alt={props.alt || ''} />\n  ),\n}","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","ul","li","a","pre","code","_provideComponents","components","React","href","className","wrapper","MDXLayout","BlogPost","_ref","data","children","title","date","allMdx","nodes","frontmatter","Layout","pageTitle","Card","CardHeader","CardTitle","CardDescription","CardContent","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","h1","h3","h4","h5","h6","ol","blockquote","style","overflowX","table","th","td","hr","img","alt","emptyComponents","MDXContext","useMDXComponents","contextComponents","properties","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}